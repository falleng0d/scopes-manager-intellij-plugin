import java.io.File

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.16.1'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
}

group 'com.alexey-anufriev'
version '1.9.5'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.21'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.8.21'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.0.0"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

intellij {
    version.set('2022.2')
}

patchPluginXml {
    version.set(project.version as String)
    sinceBuild.set('222')
    untilBuild.set('233.*')
}

kotlin {
    jvmToolchain(17)
}

test {
    useJUnitPlatform()
}

publishPlugin {
    token.set(System.getenv("PUBLISH_TOKEN"))
}

tasks.register('runRider') {
    intellij {
        type.set("RD")
    }
    dependsOn(runIde)
}

tasks.register('installPlugin') {
  doLast {
    // Default environment file.
    // WARNING: Variables defined on the system will override the ones defined in this file
    var envFile = "../.env"

    // Load environment file if it exists
    var environment = [:]
    if (file(envFile).exists()) {
      file(envFile).readLines().each() {
        if (!it.isEmpty() && !it.startsWith("#")) {
          def pos = it.indexOf("=")
          def key = it.substring(0, pos)

          // check if the key is already set
          if (System.getenv(key) == null) {
            environment[key] = it.substring(pos + 1)
          }
        }
      }
    }

    def pluginName = "scopes-manager-intellij-plugin"
    def installLocations = environment.get("INSTALL_LOCATIONS") ?: System.getenv("INSTALL_LOCATIONS")

    if (installLocations == null) {
      println("[WARNING] No install locations specified")
      return
    }

    List<String> locationsList = installLocations.split(",")

    // eg. build/distributions/Plugin-2000.10.1.100.zip
    def pluginZip = file("build/distributions/${pluginName}-" + project.version + '.zip')

    locationsList.each { location ->
      // extract installation name (eg  C:\Users\...\JetBrains\Rider2023.2\plugins
      // -> Rider2023.2)
      def separator = location.contains("/") ? "/" : "\\\\"
      def installationName = location.split(separator)[-2]

      // delete plugin folder
      File existingInstallation = file(location + "/${pluginName}")
      if (existingInstallation.exists()) {
        if (!existingInstallation.deleteDir()) {
          println("[ERROR] Skipping ${installationName}. Failed to delete existing installation")
          return
        }
      }

      copy {
        from zipTree(pluginZip)
        into location
      }

      println("Plugin installed to ${installationName}")
    }
  }
}

tasks.named('buildPlugin') {
  finalizedBy 'installPlugin'
}
